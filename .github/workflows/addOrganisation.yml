name: add or update orga
# Run this workflow on demande via the github console
on: 
  workflow_dispatch:
    inputs:
      # gets organisation name from user at launch (mandatory)
      organisationName:
        description: 'Organisation name'     
        required: true
      # gets environment from user at launch (still useless atm)
      environment:
        description: 'Environment (prod, dev, test, ...)'     
        required: false

jobs:
  deployOrganisation:
    runs-on: ubuntu-latest
    env:
      organisationName: ${{ github.event.inputs.organisationName }}
    steps:
    # Checks out a copy of your repository on the ubuntu-latest machine
    - name: Checkout code
      uses: actions/checkout@v2
    # installing yq (like jq but for yaml files)
    - name: install yq
      run: |
        pip3 install yq
    # check if organisation exists and get its configuration (still useless atm)
    - name: organisation configuration
      run: |
        export PATH=${PATH}:/home/runner/.local/bin/
        echo organisationName=${organisationName}
        [ "${organisationName}" = "$(echo ${organisationName} | tr '[:upper:]' '[:lower:]')" ] || ( echo "Organisation name must be lower case" ; exit 1 )
        yq '.organisations.'${organisationName} config.yml > /dev/null 2>&1 || ( echo "Organisation \"${organisationName}\" in not allowed" ; exit 1 )
    # commection to gcloud and k8s cluster
    - name: connection to GCloud and k8s
      env:
        GCLOUD_CREDENTIALS: ${{ secrets.GCLOUD_CREDENTIALS }}
      run: |
        echo $GCLOUD_CREDENTIALS > /tmp/gcloudCredentials
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcloudCredentials
        gcloud auth activate-service-account --key-file /tmp/gcloudCredentials
        gcloud container clusters get-credentials --project connectors-preview --region europe-west1-b connectors-stunnect-env
    # retrieve git project used to install products
    - name: clone project ds-workspace
      env:
        GITLABSSHKEY: ${{ secrets.GITLABSSHKEY }}
      run: |
        eval $(ssh-agent)
        ssh-add - <<< "${GITLABSSHKEY}"
        mkdir ~/.ssh
        ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
        git clone git@gitlab.com:owkin/ds-workspace.git
        cd ds-workspace
        git checkout investigation/automatic_deployment
    # install mlhub
    - name: mlhub deploy
      env:
        MLHUB_RELEASE: 1.0.0
      run: |
        cd ds-workspace
        helm upgrade --install mlhub https://github.com/ml-tooling/ml-hub/releases/download/${MLHUB_RELEASE}/mlhub-chart-${MLHUB_RELEASE}.tgz --namespace ${organisationName} --create-namespace --set-file userConfig=./dsws/jupyterhub_user_config.py --values ./dsws/config.yaml
    # install studio
    - name: studio deploy
      env:
        CHARTMUSEUM_USER: guest
        CHARTMUSEUM_PASSWORD: ${{ secrets.CHARTMUSEUM_PASSWORD }}
      run: |
        cd ds-workspace
        helm repo add owkin https://dev-charts.owkin.tech/ --username ${CHARTMUSEUM_USER} --password ${CHARTMUSEUM_PASSWORD}
        helm repo update
        helm upgrade --install studio owkin/owkin-studio --namespace ${organisationName} --values ./common-studio/gcp.yaml --values ./common-studio/preview.yaml
    # install connect
    - name: connect deploy
      run: |
        cd ds-workspace
        helm repo add substra https://substrafoundation.github.io/charts/
        helm repo update
        helm upgrade --install hlf  substra/hlf-k8s --namespace ${organisationName}
        helm upgrade --install substra-backend substra/substra-backend
        ### update this component : --devel has been added to install it
        helm upgrade --install --devel substra-frontend substra/substra-frontend
    # create dns names for mlhub and studio services
    - name: set traefik routes
      run: |
        cd traefik
        sed 's/{{namespace}}/'${organisationName}'/g' ingress-route-mlhub.yaml.tpl > ingress-route-mlhub.yaml
        sed 's/{{namespace}}/'${organisationName}'/g' ingress-route-studio.yaml.tpl > ingress-route-studio.yaml
        kubectl apply -f ingress-route-mlhub.yaml
        kubectl apply -f ingress-route-studio.yaml